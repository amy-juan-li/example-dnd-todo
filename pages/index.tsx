import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useState } from 'react'

import { DragDropContext, Draggable, Droppable, DropResult, resetServerContext } from 'react-beautiful-dnd'
import Column from '../components/column'

import InputField from '../components/inputfield'
import TodoApp from '../components/todoapp'
import Todos from '../components/todos'

import { Status, Todo, TodosStatus, WeekDay } from '../models/todo'
import styles from '../styles/Home.module.css'


const Home: NextPage = () => {
  const [name, setName] = useState<string>('')
  const [backlogTodos, setBacklogTodos] = useState<Todo[]>([])
  const [activeTodos, setActiveTodos] = useState<Todo[]>([])
  const [completedTodos, setCompletedTodos] = useState<Todo[]>([])

  //  type Actions = 
  //    { type: 'add', payload: string }
  //  | { type: 'remove', payload: number }
  //  | { type: 'done', payload: number }
  //
  //  const TodoReducer = (state: Todo[], action: Actions) => {
  //    switch (action.type) {
  //      case 'add':
  //        return [
  //          ...state,
  //          {id: Date.now(), name: action.payload, isDone: false}
  //        ]
  //      case 'remove':
  //        return state.filter((item) => item.id !== action.payload)
  //      case 'done':
  //        return state.map((item) => item.id === action.payload ? {...item, isDone: !item.isDone} : item)
  //    }
  //  }
  //  const [state, dispatch] = useReducer(TodoReducer, [])
  //

  const addNewTodo = (e: React.FormEvent) => {
    e.preventDefault()
    if (name) {
      const newTodo = {
        id: Date.now(),
        name,
        doDay: WeekDay.Monday,
        status: Status.Backlog,
        isDone: false
      }
      setBacklogTodos([...backlogTodos, newTodo])
      setName('')
    }
  }

  const onDragEndHandler = (result: DropResult) => {
    const { destination, source } = result

    if (!destination || (destination.droppableId === source.droppableId
      && destination.index === source.index)) return

    let add,
      backlog = backlogTodos,
      active = activeTodos,
      complete = completedTodos

    if (source.droppableId === TodosStatus.BacklogTodos) {
      add = backlogTodos[source.index]
      backlog.splice(source.index, 1)
    } else if (source.droppableId === TodosStatus.ActiveTodos) {
      add = active[source.index]
      active.splice(source.index, 1)
    } else {
      add = complete[source.index]
      complete.splice(source.index, 1)
    }

    if (destination.droppableId === TodosStatus.BacklogTodos) {
      backlog.splice(destination.index, 0, add)
    } else if (destination.droppableId === TodosStatus.ActiveTodos) {
      active.splice(destination.index, 0, add)
    } else {
      complete.splice(destination.index, 0, add)
    }

    setBacklogTodos(backlog)
    setActiveTodos(active)
    setCompletedTodos(complete)
  }


  return (
    <DragDropContext onDragEnd={onDragEndHandler}>
      <div className={styles.container}>
        <Head>
          <title>Drag-Drop-Animated-Todo</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className='flex flex-col items-center  min-h-screen pt-10'>
          <h2 className='text-4xl font-bold'>Action</h2>
          <InputField
            name={name}
            setName={setName}
            addNewTodo={addNewTodo}
          />
          <Todos
            backlogTodos={backlogTodos}
            setBacklogTodos={setBacklogTodos}
            activeTodos={activeTodos}
            setActiveTodos={setActiveTodos}
            completedTodos={completedTodos}
            setCompletedTodos={setCompletedTodos}
          />
        </div>
      </div>
    </DragDropContext>
  )
}

export default Home

//const initialData = {
//  tasks: {
//
//  },
//  columns: [
//    {
//      id: 'BacklogTasks',
//      title: 'Backlog',
//    },
//    {
//      id: 'ActiveTasks',
//      title: 'In progress',
//    },
//    {
//      id: 'ActiveTasks',
//      title: 'In progress',
//    },
//    {
//      id: 'CompletedTasks',
//      title: 'Done',
//    }
//  ]
//}
